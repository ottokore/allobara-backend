"""
Fonctions de s√©curit√© pour AlloBara
Gestion JWT, hachage PIN, g√©n√©ration OTP
"""

import secrets
import hashlib
from datetime import datetime, timedelta
from typing import Any, Union

from jose import JWTError, jwt
from passlib.context import CryptContext

from app.core.config import settings

# Configuration pour le hachage des mots de passe
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_access_token(
    subject: Union[str, Any], expires_delta: timedelta = None
) -> str:
    """
    Cr√©er un token JWT d'acc√®s
    """
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(
            minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES
        )
    
    to_encode = {"exp": expire, "sub": str(subject)}
    encoded_jwt = jwt.encode(
        to_encode, 
        settings.SECRET_KEY, 
        algorithm=settings.ALGORITHM
    )
    return encoded_jwt

def verify_token(token: str) -> Union[str, None]:
    """
    V√©rifier et d√©coder un token JWT
    """
    try:
        payload = jwt.decode(
            token, 
            settings.SECRET_KEY, 
            algorithms=[settings.ALGORITHM]
        )
        user_id: str = payload.get("sub")
        if user_id is None:
            return None
        return user_id
    except JWTError:
        return None

def hash_pin(pin: str) -> str:
    """
    Hacher un code PIN √† 4 chiffres
    """
    return pwd_context.hash(pin)

def verify_pin(plain_pin: str, hashed_pin: str) -> bool:
    """
    V√©rifier un code PIN
    """
    return pwd_context.verify(plain_pin, hashed_pin)

def generate_otp() -> str:
    """
    G√©n√©rer un code OTP √† 6 chiffres
    """
    return f"{secrets.randbelow(1000000):06d}"

def generate_referral_code(user_id: int) -> str:
    """
    G√©n√©rer un code de parrainage unique
    Format: ALL + 5 chiffres bas√©s sur l'ID utilisateur
    """
    # Cr√©er un hash bas√© sur l'ID utilisateur et un salt
    salt = settings.SECRET_KEY[:10]
    hash_input = f"{user_id}{salt}".encode()
    hash_object = hashlib.sha256(hash_input)
    hash_hex = hash_object.hexdigest()
    
    # Extraire 5 chiffres du hash
    numbers = ''.join(filter(str.isdigit, hash_hex))[:5]
    
    # S'assurer qu'on a 5 chiffres
    if len(numbers) < 5:
        numbers = f"{user_id:05d}"[-5:]
    
    return f"ALL{numbers}"

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    V√©rifier un mot de passe (pour usage futur si n√©cessaire)
    """
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    """
    Hacher un mot de passe (pour usage futur si n√©cessaire)
    """
    return pwd_context.hash(password)

def generate_random_pin() -> str:
    """
    G√©n√©rer un PIN al√©atoire √† 4 chiffres (pour tests)
    """
    return f"{secrets.randbelow(10000):04d}"

def is_pin_secure(pin: str) -> bool:
    """
    V√©rifier si un PIN est suffisamment s√©curis√©
    - Ne doit pas √™tre 0000, 1111, 2222, etc.
    - Ne doit pas √™tre 1234, 4321, etc.
    """
    if len(pin) != 4:
        return False
    
    # V√©rifier que ce ne sont pas tous les m√™mes chiffres
    if len(set(pin)) == 1:
        return False
    
    # V√©rifier que ce n'est pas une s√©quence simple
    forbidden_sequences = [
        "1234", "2345", "3456", "4567", "5678", "6789",
        "4321", "5432", "6543", "7654", "8765", "9876",
        "0123", "1230", "2301", "3012"
    ]
    
    if pin in forbidden_sequences:
        return False
    
    return True

def create_admin_token(admin_id: str) -> str:
    """
    Cr√©er un token JWT sp√©cial pour les administrateurs
    """
    expire = datetime.utcnow() + timedelta(hours=8)  # Token admin expire plus vite
    to_encode = {
        "exp": expire, 
        "sub": str(admin_id),
        "role": "admin",
        "type": "admin_access"
    }
    encoded_jwt = jwt.encode(
        to_encode, 
        settings.SECRET_KEY, 
        algorithm=settings.ALGORITHM
    )
    return encoded_jwt

def verify_admin_token(token: str) -> Union[dict, None]:
    """
    V√©rifier un token JWT admin et retourner les infos
    """
    try:
        payload = jwt.decode(
            token, 
            settings.SECRET_KEY, 
            algorithms=[settings.ALGORITHM]
        )
        
        user_id: str = payload.get("sub")
        role: str = payload.get("role")
        token_type: str = payload.get("type")
        
        if user_id is None or role != "admin" or token_type != "admin_access":
            return None
            
        return {
            "user_id": user_id,
            "role": role,
            "type": token_type
        }
    except JWTError:
        return None

def generate_secure_filename(original_filename: str) -> str:
    """
    G√©n√©rer un nom de fichier s√©curis√© et unique
    """
    import os
    from uuid import uuid4
    
    # Extraire l'extension
    _, ext = os.path.splitext(original_filename)
    
    # G√©n√©rer un nom unique
    unique_name = str(uuid4())
    
    return f"{unique_name}{ext.lower()}"

def validate_file_type(filename: str, allowed_types: list) -> bool:
    """
    Valider le type de fichier upload√©
    """
    import os
    _, ext = os.path.splitext(filename)
    return ext.lower() in allowed_types

def sanitize_phone_number(phone: str) -> str:
    """
    Nettoyer et standardiser un num√©ro de t√©l√©phone
    CORRECTION MAJEURE: Ne jamais supprimer le premier 0 des num√©ros ivoiriens
    """
    import re
    
    if not phone:
        return ""
    
    # Supprimer tous les espaces et caract√®res sp√©ciaux sauf le +
    cleaned = re.sub(r'[^\d+]', '', phone.strip())
    
    # CORRECTION: Logs d√©taill√©s pour debug
    print(f"üîç SANITIZE_PHONE_NUMBER DEBUG:")
    print(f"  - Original: '{phone}'")
    print(f"  - Nettoy√©: '{cleaned}'")
    print(f"  - Longueur: {len(cleaned)}")
    
    # CORRECTION: Gestion sp√©cifique pour C√¥te d'Ivoire
    if cleaned.startswith('+225') and len(cleaned) == 13:
        # Format d√©j√† correct: +225xxxxxxxxxx (13 caract√®res)
        result = cleaned
        print(f"  - Cas 1: Format +225 complet d√©j√† correct")
        
    elif cleaned.startswith('225') and len(cleaned) == 12:
        # Format sans +: 225xxxxxxxxxx (12 caract√®res)
        result = '+' + cleaned
        print(f"  - Cas 2: Ajout du + au d√©but")
        
    elif cleaned.startswith('+2250') and len(cleaned) == 14:
        # Format avec +225 suivi de 0: +2250xxxxxxxxx (14 caract√®res)
        # CORRECTION: Ne PAS supprimer le 0, c'est partie int√©grante du num√©ro
        result = cleaned
        print(f"  - Cas 3: Format +2250 (14 chars) conserv√© tel quel")
        
    elif cleaned.startswith('2250') and len(cleaned) == 13:
        # Format 2250xxxxxxxxx (13 caract√®res) - ajouter juste le +
        result = '+' + cleaned
        print(f"  - Cas 4: Format 2250, ajout du +")
        
    elif cleaned.startswith('0') and len(cleaned) == 10:
        # Format local court: 0xxxxxxxxx (10 caract√®res)
        # CORRECTION: Ajouter +225 DEVANT le 0, ne pas le remplacer
        result = '+225' + cleaned
        print(f"  - Cas 5: Format local 10 chiffres, +225 ajout√© devant")
        
    elif len(cleaned) == 10 and not cleaned.startswith('+') and not cleaned.startswith('0'):
        # 10 chiffres sans pr√©fixe: xxxxxxxxxx
        result = '+225' + cleaned
        print(f"  - Cas 6: 10 chiffres, ajout de +225")
        
    else:
        # Format non reconnu, garder tel quel avec warning
        result = cleaned
        print(f"  - Cas 7: Format non reconnu, conservation")
        print(f"  ‚ö†Ô∏è WARNING: Format inhabituel: '{cleaned}' (longueur: {len(cleaned)})")
    
    print(f"  - R√©sultat final: '{result}'")
    print(f"  - Longueur finale: {len(result)}")
    
    # CORRECTION: Validation finale mise √† jour
    expected_length = 13  # +225 + 10 chiffres
    if result.startswith('+2250') and len(result) == 14:
        expected_length = 14  # +225 + 0 + 9 chiffres
    
    if result.startswith('+225') and len(result) == expected_length:
        print(f"  ‚úÖ Format valide pour C√¥te d'Ivoire")
    else:
        print(f"  ‚ö†Ô∏è Format potentiellement invalide")
    
    return result