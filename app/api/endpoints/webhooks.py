"""
Endpoints Webhook pour CinetPay
Re√ßoit et traite les notifications de paiement
"""

from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks, Request, status
from sqlalchemy.orm import Session
from typing import Dict, Any
import logging
import hashlib
import hmac

from app.db.database import get_db
from app.schemas.payment import CinetPayWebhookData
from app.services.cinetpay_service import CinetPayService
from app.services.subscription_service import SubscriptionService
from app.models.payment import Payment
from app.models.subscription import Subscription
from app.core.config import settings


router = APIRouter()
logger = logging.getLogger(__name__)


# =========================================
# WEBHOOK CINETPAY
# =========================================

@router.post("/cinetpay")
async def cinetpay_webhook(
    webhook_data: CinetPayWebhookData,
    background_tasks: BackgroundTasks,
    request: Request,
    db: Session = Depends(get_db)
):
    """
    Webhook principal pour les notifications CinetPay
    Appel√© automatiquement par CinetPay lors d'un paiement
    
    Args:
        webhook_data: Donn√©es du webhook
        background_tasks: T√¢ches en arri√®re-plan
        request: Requ√™te FastAPI
        db: Session de base de donn√©es
    
    Returns:
        Confirmation de r√©ception
    """
    
    logger.info(f"üîî Webhook CinetPay re√ßu: {webhook_data.dict()}")
    
    try:
        # 1. V√©rifier que le site_id correspond
        cinetpay_service = CinetPayService(db)
        
        if webhook_data.cpm_site_id != cinetpay_service.site_id:
            logger.error(f"‚ùå Site ID invalide: {webhook_data.cpm_site_id}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Site ID invalide"
            )
        
        # 2. R√©cup√©rer notre transaction_id (stock√© dans cpm_custom)
        transaction_id = webhook_data.cpm_custom
        
        if not transaction_id:
            logger.error("‚ùå Transaction ID manquant dans le webhook")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Transaction ID manquant"
            )
        
        logger.info(f"üìù Traitement webhook pour transaction: {transaction_id}")
        
        # 3. Traiter le webhook via le service
        result = cinetpay_service.process_webhook(webhook_data.dict())
        
        if not result["success"]:
            logger.error(f"‚ùå Erreur traitement webhook: {result['message']}")
            return {
                "status": "error",
                "message": result["message"]
            }
        
        # 4. Si paiement r√©ussi, activer l'abonnement en arri√®re-plan
        if result.get("status") == "success":
            logger.info(f"‚úÖ Paiement r√©ussi, activation de l'abonnement...")
            background_tasks.add_task(
                activate_subscription_from_payment,
                payment_id=result["payment_id"],
                db=db
            )
        
        logger.info(f"‚úÖ Webhook trait√© avec succ√®s: {transaction_id}")
        
        # CinetPay attend cette r√©ponse
        return {
            "status": "received",
            "code": "00",
            "message": "Webhook trait√© avec succ√®s"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur webhook CinetPay: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors du traitement: {str(e)}"
        )


# =========================================
# V√âRIFICATION MANUELLE
# =========================================

@router.post("/cinetpay/verify/{transaction_id}")
async def manual_verify_cinetpay(
    transaction_id: str,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """
    V√©rification manuelle d'un paiement CinetPay
    Utile pour le d√©veloppement ou en cas de probl√®me de webhook
    
    Args:
        transaction_id: ID de transaction AlloBara
        background_tasks: T√¢ches en arri√®re-plan
        db: Session de base de donn√©es
    
    Returns:
        Statut de la v√©rification
    """
    
    logger.info(f"üîç V√©rification manuelle demand√©e: {transaction_id}")
    
    try:
        cinetpay_service = CinetPayService(db)
        
        # V√©rifier le statut aupr√®s de CinetPay
        result = cinetpay_service.check_payment_status(transaction_id)
        
        if not result["success"]:
            return {
                "success": False,
                "message": result["message"]
            }
        
        # R√©cup√©rer le paiement
        payment = Payment.get_by_transaction_id(db, transaction_id)
        
        if not payment:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Paiement non trouv√©"
            )
        
        # Si le paiement est accept√© et pas encore marqu√© comme success
        if result["status"] == "ACCEPTED" and payment.status != "success":
            logger.info(f"‚úÖ Paiement confirm√©, mise √† jour...")
            
            # Marquer comme success
            payment.mark_as_success(
                cinetpay_transaction_id=result.get("operator_id")
            )
            db.commit()
            
            # Activer l'abonnement en arri√®re-plan
            background_tasks.add_task(
                activate_subscription_from_payment,
                payment_id=payment.id,
                db=db
            )
            
            return {
                "success": True,
                "message": "Paiement confirm√© et abonnement en cours d'activation",
                "status": "success",
                "payment_id": payment.id
            }
        
        return {
            "success": True,
            "message": f"Statut: {result['status']}",
            "status": result["status"],
            "details": result
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur v√©rification manuelle: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur: {str(e)}"
        )


# =========================================
# TEST DU WEBHOOK
# =========================================

@router.get("/cinetpay/test")
async def test_webhook_endpoint():
    """
    Test de disponibilit√© du webhook
    
    Returns:
        Confirmation que le webhook est accessible
    """
    return {
        "success": True,
        "message": "Webhook CinetPay op√©rationnel",
        "endpoint": "/api/v1/webhooks/cinetpay",
        "methods": ["POST"]
    }


@router.post("/cinetpay/test")
async def test_webhook_post():
    """
    Test POST du webhook
    
    Returns:
        Confirmation de r√©ception
    """
    return {
        "success": True,
        "message": "Webhook CinetPay peut recevoir des requ√™tes POST",
        "timestamp": "2025-01-24T10:00:00Z"
    }


# =========================================
# T√ÇCHE D'ACTIVATION D'ABONNEMENT
# =========================================

async def activate_subscription_from_payment(payment_id: int, db: Session):
    """
    Active l'abonnement apr√®s un paiement r√©ussi
    Ex√©cut√© en arri√®re-plan
    
    Args:
        payment_id: ID du paiement
        db: Session de base de donn√©es
    """
    try:
        logger.info(f"üîÑ Activation abonnement pour paiement #{payment_id}")
        
        # R√©cup√©rer le paiement
        payment = db.query(Payment).filter(Payment.id == payment_id).first()
        
        if not payment:
            logger.error(f"‚ùå Paiement #{payment_id} non trouv√©")
            return
        
        if payment.status != "success":
            logger.warning(f"‚ö†Ô∏è Paiement #{payment_id} pas en statut success")
            return
        
        # R√©cup√©rer l'utilisateur
        user = payment.user
        
        if not user:
            logger.error(f"‚ùå Utilisateur non trouv√© pour paiement #{payment_id}")
            return
        
        # Si un subscription_id existe d√©j√†, l'utiliser
        if payment.subscription_id:
            subscription = db.query(Subscription).filter(
                Subscription.id == payment.subscription_id
            ).first()
            
            if subscription:
                logger.info(f"üì¶ Abonnement #{subscription.id} trouv√©, activation...")
                
                # Activer via le service
                subscription_service = SubscriptionService(db)
                result = subscription_service.activate_subscription_from_payment(
                    payment_id=payment.id,
                    plan=subscription.plan
                )
                
                if result["success"]:
                    logger.info(f"‚úÖ Abonnement #{subscription.id} activ√© avec succ√®s")
                    
                    # Mettre √† jour le statut utilisateur
                    user.subscription_status = "active"
                    user.is_visible = True
                    db.commit()
                else:
                    logger.error(f"‚ùå √âchec activation: {result['message']}")
        else:
            logger.warning(f"‚ö†Ô∏è Pas de subscription_id pour paiement #{payment_id}")
            # On pourrait cr√©er un nouvel abonnement ici si n√©cessaire
        
    except Exception as e:
        logger.error(f"‚ùå Erreur activation abonnement: {str(e)}")
        db.rollback()


# =========================================
# LOGS ET DEBUGGING
# =========================================

@router.get("/cinetpay/logs/{transaction_id}")
async def get_webhook_logs(
    transaction_id: str,
    db: Session = Depends(get_db)
):
    """
    R√©cup√®re les logs webhook d'une transaction
    Utile pour le debugging
    
    Args:
        transaction_id: ID de transaction
        db: Session de base de donn√©es
    
    Returns:
        Logs du webhook si disponibles
    """
    try:
        payment = Payment.get_by_transaction_id(db, transaction_id)
        
        if not payment:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Transaction non trouv√©e"
            )
        
        return {
            "success": True,
            "transaction_id": transaction_id,
            "webhook_received": payment.webhook_received,
            "webhook_received_at": payment.webhook_received_at.isoformat() if payment.webhook_received_at else None,
            "webhook_data": payment.webhook_data,
            "status": payment.status.value if payment.status else None,
            "provider_response": payment.provider_response
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur: {str(e)}"
        )
